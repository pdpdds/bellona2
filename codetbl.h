#ifndef OPCODE_TABLE_HEADER
#define OPCODE_TABLE_HEADER

#include <types.h>

enum Operand_Constant {
	oc_BLANK   = 0	,
	oc_REG	   	    ,
	oc_MEM	        ,
    oc_IMM          ,
    oc_IMMdisp      ,      // Case of Enter Imm, ImmDisp
	oc_CONST        ,
    oc_REL,
    oc_NULL
};

enum tag_Operation_Code_Constant {
	ot_DB	= 0,
	
    ot_AAA,
    ot_AAD,
    ot_AAM,
    ot_AAS,
    ot_ADC ,
    ot_ADD ,
    ot_ADDR_PRX,
    ot_AND ,
    ot_ARPL,
    ot_BOUND,
    ot_BSF,
    ot_BSR,
    ot_BSWAP,
    ot_BT,
    ot_BTC,
    ot_BTR,
    ot_BTS,
    ot_CALL,
    ot_CBW,
    ot_CDQ,
    ot_CLC,
    ot_CLD,
    ot_CLI,
    ot_CLTS,
    ot_CMC,
    ot_CMP,
    ot_CMPSB,
    ot_CMPSD,
    ot_CMPSW,
    ot_CMPXCHG,
    ot_CPUID,
    ot_CWD,
    ot_CWDE,
    ot_DAA ,
    ot_DAS,
    ot_DEC,
    ot_DIV,
    ot_ENTER,
    ot_ESC8,
    ot_ESC9,
    ot_ESCa,
    ot_ESCb,
    ot_ESCc,
    ot_ESCd,
    ot_ESCe,
    ot_ESCf,
    ot_F2XM1,
    ot_FABS,
    ot_FADD,
    ot_FADDP,
    ot_FBLD,
    ot_FBSTP,
    ot_FCHS,
    ot_FCOM,
    ot_FCOMP,
    ot_FCOS,
    ot_FDECSTP,
    ot_FDIV,
    ot_FDIVP,
    ot_FDIVR,
    ot_FDIVRP,
    ot_FFREE,
    ot_FIADD,
    ot_FICOM,
    ot_FICOMP,
    ot_FIDIV,
    ot_FIDIVR,
    ot_FILD,
    ot_FIMUL,
    ot_FINCSTP,
    ot_FIST,
    ot_FISTP,
    ot_FISUB,
    ot_FISUBR,
    ot_FLD,
    ot_FLD1,
    ot_FLDCW,
    ot_FLDENV,
    ot_FLDL2E,
    ot_FLDL2T,
    ot_FLDLG2,
    ot_FLDLN2,
    ot_FLDPI,
    ot_FLDZ,
    ot_FMUL,
    ot_FMULP,
    ot_FNOP,
    ot_FPATAN,
    ot_FPREM,
    ot_FPREM1,
    ot_FPTAN,
    ot_FRNDINT,
    ot_FRSTOR,
    ot_FSAVE,
    ot_FSCALE,
    ot_FSIN,
    ot_FSINCOS,
    ot_FSQRT,
    ot_FST,
    ot_FSTCW,
    ot_FSTENV,
    ot_FSTP,
    ot_FSTSW,
    ot_FSUB,
    ot_FSUBP,
    ot_FSUBR,
    ot_FSUBRP,
    ot_FTST,
    ot_FUCOM,
    ot_FUCOMP,
    ot_FUCOMPP,
    ot_FXAM,
    ot_FXCH,
    ot_FXTRACT,
    ot_FYL2X,
    ot_FYL2XP1,
    ot_GRP1,
    ot_GRP2,
    ot_GRP3,
    ot_GRP4,
    ot_GRP5,
    ot_GRP6,
    ot_GRP7,
    ot_GRP8,
    ot_GRP9,
    ot_HLT,
    ot_IDIV,
    ot_IMUL,
    ot_IN,
    ot_INC,
    ot_INSB,
    ot_INSD,
    ot_INSW,
    ot_INT,
    ot_INT3,
    ot_INTO,
    ot_INVD,
    ot_INVLPG,
    ot_IRET,
    ot_IRETD,
    ot_JB,
    ot_JBE,
    ot_JCXZ,
    ot_JL,
    ot_JLE,
    ot_JMP,
    ot_JNB,
    ot_JNBE,
    ot_JNL,
    ot_JNLE,
    ot_JNO,
    ot_JNP,
    ot_JNS,
    ot_JNZ,
    ot_JO,
    ot_JP,
    ot_JS,
    ot_JZ,
    ot_LAHF,
    ot_LAR,
    ot_LDS,
    ot_LEA,
    ot_LEAVE,
    ot_LES,
    ot_LFS,
    ot_LGDT,
    ot_LGS,
    ot_LIDT,
    ot_LLDT,
    ot_LMSW ,
    ot_LOCK,
    ot_LODSB,
    ot_LODSD,
    ot_LODSW,
    ot_LOOP,
    ot_LOOPE,
    ot_LOOPNE,
    ot_LSL,
    ot_LSS,
    ot_LTR,
    ot_MOV,
    ot_MOVSB,
    ot_MOVSD,
    ot_MOVSW,
    ot_MOVSX,
    ot_MOVZX,
    ot_MUL,
    ot_NEG,
    ot_NOP,
    ot_NOT,
    ot_OPND_PRX,
    ot_OR  ,
    ot_OUT,
    ot_OUTSB,
    ot_OUTSD,
    ot_OUTSW,
    ot_POP ,
    ot_POPA,
    ot_POPAD,
    ot_POPF,
    ot_POPFD,
    ot_PUSH,
    ot_PUSHA,
    ot_PUSHAD,
    ot_PUSHF,
    ot_PUSHFD,
    ot_RCL,
    ot_RCR,
    ot_REP,
    ot_REPNE,
    ot_RETF,
    ot_RETN,
    ot_ROL,
    ot_ROR,
    ot_RSM,
    ot_SAHF,
    ot_SAR,
    ot_SBB,
    ot_SCASB,
    ot_SCASD,
    ot_SCASW,
    ot_SEG_PRX,
    ot_SETB,
    ot_SETBE,
    ot_SETL,
    ot_SETLE,
    ot_SETNB,
    ot_SETNBE,
    ot_SETNL,
    ot_SETNLE,
    ot_SETNO,
    ot_SETNP,
    ot_SETNS,
    ot_SETNZ,
    ot_SETO,
    ot_SETP,
    ot_SETS,
    ot_SETZ,
    ot_SGDT,
    ot_SHL,
    ot_SHLD,
    ot_SHR,
    ot_SHRD,
    ot_SIDT  ,
    ot_SLDT,
    ot_SMSW ,
    ot_STC,
    ot_STD,
    ot_STI,
    ot_STOSB,
    ot_STOSD,
    ot_STOSW,
    ot_STR  ,
    ot_SUB,
    ot_TEST,
    ot_VERR ,
    ot_VERW,
    ot_WAIT,
    ot_WINVD,
    ot_XADD,
    ot_XCHG,
    ot_XLAT,
    ot_XOR ,
    
	TOTAL_ot
};

enum REGISTER_CONSTANT {
    rAH = 10,   rAL,    rBH,    rBL,    rCH,    rCL,    rDH,    rDL,
    rAX = 20,   rBX,    rCX,    rDX,    rSI,    rDI,    rBP,    rSP,
    rEAX= 30,   rEBX,   rECX,   rEDX,   rESI,   rEDI,   rEBP,   rESP, rEIP,
    rCS = 40,   rDS,    rES,    rFS,    rGS,    rSS,
    rC0 = 50,   rC1,    rC2,    rC3,    rC4,    rC5,    rC6,    rC7,
    rD0 = 60,   rD1,    rD2,    rD3,    rD4,    rD5,    rD6,    rD7,
    rT0 = 70,   rT1,    rT2,    rT3,    rT4,    rT5,    rT6,    rT7,
    rST = 80,   rST0,   rST1,   rST2,   rST3,   rST4,   rST5,   rST6, rST7,

    eAX = 100,  eBX,    eCX,    eDX,    eSI,    eDI,    eBP,    eSP,

    rNULL
};

typedef  struct OpDataTag{
    UINT16   wType;
    UCHAR    szOperand[3][3];
};
typedef  struct OpDataTag OpDataStt;

typedef  struct OpData2Tag{
    UINT16   wNo;
	UINT16   wType;
    UCHAR    szOperand[3][3];
};
typedef  struct OpData2Tag OpData2Stt;

extern OpDataStt  OneByteTbl[];
extern OpData2Stt TwoByteTbl[];

extern UINT16 swGrp01Tbl[];
extern UINT16 swGrp02Tbl[];
extern UINT16 swGrp03Tbl[];
extern UINT16 swGrp04Tbl[];
extern UINT16 swGrp05Tbl[];
extern UINT16 swGrp06Tbl[];
extern UINT16 swGrp07Tbl[];
extern UINT16 swGrp08Tbl[];
extern UINT16 SegRegTbl[];

extern UINT16 swEscD8Tbl [];
extern UINT16 swEscD9Tbl1[];
extern UINT16 swEscD9Tbl2[];
extern UINT16 swEscDaTbl [];
extern UINT16 swEscDbTbl [];
extern UINT16 swEscDcTbl [];
extern UINT16 swEscDdTbl1[];
extern UINT16 swEscDdTbl2[];
extern UINT16 swEscDeTbl [];
extern UINT16 swEscDfTbl [];

extern UINT16  wSearchTwoByteTbl( OpDataStt*, UINT16 );
extern UINT16  RegTbl8[], RegTbl16[], RegTbl32[];
extern CHAR* spMnemonic[];
extern CHAR* pRegStr( UINT16 );

#endif

